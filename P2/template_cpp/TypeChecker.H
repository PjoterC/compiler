/* File generated by the BNF Converter (bnfc 2.9.5). */

#ifndef TYPECHECKER_HEADER
#define TYPECHECKER_HEADER
/* You might want to change the above name. */

#include "Absyn.H"
#include "Helpers.H"
#include <iostream>

class TypeChecker : public Visitor
{

    // Predefined types for type compatibility checks
  Type_int* typeInt_ = new Type_int();
  Type_bool* typeBool_ = new Type_bool();
  Type_void* typeVoid_ = new Type_void();
  Type_double* typeDouble_ = new Type_double();
  Type_exception* typeException_ = new Type_exception();


public:

  void run(Program *p); // Start the type checking process
  Context context;


  const Type* currentType_ = nullptr; // Holds the type currently expected in the context
  const Type* lastType_ = nullptr; // Holds the type of the last visited expression in a block
  const Type* returnType_ = nullptr; // Holds the return type of the current function



// framework


  bool typesEqual(const Type* t1, const Type* t2) const;   // Check if two types are equal
  bool isNumeric(const Type* t) const; // Check if a type is numeric (int or double)
  bool isLValue(Exp* e); // Check if an expression is an l-value (can be assigned to)
  std::string typeToString(const Type* t) const; // Convert a type to a string representation
  // Getters for predefined types
  const Type* getIntType() const { return typeInt_; }
  const Type* getBoolType() const { return typeBool_; }
  const Type* getVoidType() const { return typeVoid_; }
  const Type* getDoubleType() const { return typeDouble_; }
  const Type* getExceptionType() const { return typeException_; }


  // add a new scope (when entering a new block)
  void pushScope();
  // remove the current scope (when leaving a block)
  void popScope();
  // add a function to the current scope
  void addFn(const Id& id, const FnType& type);
  // add a struct to the current scope
  void addSt(const Id& id, const StType& type);
  // add a variable to the current scope
  void addVa(const Id& id, const VaType& type);

  // find functions search in inner blocks first, then outer blocks

  const FnType* findFn(const Id& id);
  const StType* findSt(const Id& id);
  const VaType* findVa(const Id& id);
  const VaType* findVaInCurrentScope(const Id& id) const; // Find variable in the current scope only

  bool typesEqual(const Type* a, const Type* b);


  void visitProgram(Program *p);
  void visitDef(Def *p);
  void visitField(Field *p);
  void visitArg(Arg *p);
  void visitStm(Stm *p);
  void visitIdIn(IdIn *p);
  void visitExp(Exp *p);
  void visitType(Type *p);


//Section 1
  void visitPDefs(PDefs *p);
  void visitDFun(DFun *p);
  void visitDStruct(DStruct *p);
  void visitDStructDer(DStructDer *p);
  void visitFDecl(FDecl *p);
  void visitADecl(ADecl *p);


  //Section 2 - Arion
  void visitSExp(SExp *p);
  void visitSDecls(SDecls *p);
  void visitSReturn(SReturn *p);
  void visitSReturnV(SReturnV *p);
  void visitSBlock(SBlock *p);
  void visitSTry(STry *p);
  void visitIdNoInit(IdNoInit *p);
  void visitIdInit(IdInit *p);
  void visitETrue(ETrue *p);
  void visitEFalse(EFalse *p);
  void visitEInt(EInt *p);
  void visitEDouble(EDouble *p);
  void visitEId(EId *p);
  void visitEApp(EApp *p);


  //Section 3 - Lars
  void visitEProj(EProj *p);
  void visitEPIncr(EPIncr *p);
  void visitEPDecr(EPDecr *p);
  void visitEIncr(EIncr *p);
  void visitEDecr(EDecr *p);
  void visitEUPlus(EUPlus *p);
  void visitEUMinus(EUMinus *p);
  void visitETwc(ETwc *p);
  void visitEEq(EEq *p);
  void visitENEq(ENEq *p);
  void visitEAnd(EAnd *p);
  void visitEOr(EOr *p);
  void visitEAss(EAss *p);
  void visitECond(ECond *p);
  void visitEThrow(EThrow *p);


  //Section 4 - Rafal
  void visitType_bool(Type_bool *p);
  void visitType_int(Type_int *p);
  void visitType_double(Type_double *p);
  void visitType_void(Type_void *p);
  void visitType_exception(Type_exception *p);
  void visitTypeId(TypeId *p);
  void visitInteger(Integer x);
  void visitChar(Char x);
  void visitDouble(Double x);
  void visitString(String x);
  void visitIdent(Ident x);
  void visitId(Id x);





// Piotr (task2)
  void visitSWhile(SWhile *p);
  void visitEMinus(EMinus *p);
  void visitEGt(EGt *p);



//Lars (task2)
  void visitSDoWhile(SDoWhile *p);
  void visitEPlus(EPlus *p);
  void visitELt(ELt *p);
//

// Arion (task2)
  void visitSFor(SFor *p);
  void visitETimes(ETimes *p);
  void visitELtEq(ELtEq *p);
//

//Rafal (task2)
  void visitSIfElse(SIfElse *p);
  void visitEGtEq(EGtEq *p);
  void visitEDiv(EDiv *p);
//








  //Implemented
  void visitListDef(ListDef *p);
  void visitListField(ListField *p);
  void visitListArg(ListArg *p);
  void visitListStm(ListStm *p);
  void visitListIdIn(ListIdIn *p);
  void visitListExp(ListExp *p);
  void visitListId(ListId *p);
//





};


#endif
